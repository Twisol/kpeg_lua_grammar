%% name = Lupin::Parser
%% {
  require 'rubinius/debugger'
  require 'ast'
  attr_accessor :ast
}
# %% ast-location = ::Lupin::AST
# %% assignment = ast Assignment(text)
# %% varlist = ast VarList(text)
# %% explist = ast ExpList(text)

chunk = (stat ";"?)* (laststat ";"?)?

block = chunk

stat = varlist "=" explist |
      functioncall |
      "do" block "end" |
      "while" exp "do" block "end" |
      "repeat" block "until" exp |
      "if" exp "then" block ("elseif" exp "then" block)* ("else" block)? "end" |
      "for" name "=" exp "," exp ("," exp)? "do" block "end" |
      "for" namelist "in" explist "do" block "end" |
      "function" funcname funcbody |
      "local" "function" name funcbody |
      "local" namelist ("=" explist)?

laststat = "return" (explist)* | "break"

funcname = name ("." name)* (":" name)?
name = </[A-Za-z_][A-Za-z_0-9]*/> { text }

varlist = var (- "," - var)*
var = name | prefixexp "[" exp "]" | prefixexp "." name

namelist = name ("," name)*

explist = (exp - "," -)* - exp
exp = "nil" | "false" | "true" | number | string | "..." | function | prefixexp |
     tableconstructor | exp binop exp | unop exp

prefixexp = var | functioncall | "(" exp ")"

functioncall = prefixexp args | prefixexp ":" name args

args = "(" - (explist)? - ")" | tableconstructor | string

function = "function" funcbody
funcbody = "(" (parlist)? ")" block "end"

parlist = namelist ("," "...") | "..."

tableconstructor = "{" fieldlist "}"
fieldlist = field (fieldsep field)* (fieldsep)?
field = "[" exp "]" "=" exp | name "=" exp | exp
fieldsep = "," | ";"

binop = "+" | "-" | "*" | "/" | "^" | "%" | ".." | "<" | "<=" | ">" | ">=" | "==" | "~=" | "and" | "or"

unop = "-" | "not" | "#" 

primitives = /\b/ ("nil" | "false" | "true") /\b/

# Numbers
number = hex-literal | dec-literal
hex-literal = "0x" /[A-Fa-f0-9]+/
dec-literal = dec-literal-base dec-literal-exponent?
dec-literal-base = /\d*\.\d+/ | /\d+\.?/
dec-literal-exponent = /[Ee][+-]?\d+/

# Strings
string = sgl-string | dbl-string | long-string
sgl-string = "'" </(\\.|[^\'\n])*/m> "'" {text}
dbl-string = "\"" </(\\.|[^\"\n])*/m> "\"" {text}
long-string = long-string-start:e
              <(!long-string-end(e) .)*>
              long-string-end(e)
            {text}
long-string-equals = <"="*> {text}
long-string-start = "[" <long-string-equals> "[" {text}
long-string-end(eqs) = "]" long-string-equals:e &{e.length == eqs.length} "]"

# Whitespace/comments
- = whitespace | comment
whitespace = /[ \n\t]*/
comment = "--" ( !long-string-start /[^\n]+/ ("\n" | eof)
               | long-string)

# Top-level
eof = !.
root = chunk:e eof {@ast = e}
